<template>
    <k-toolbar-item icon="link" tooltip="Mef-Eline">
      <k-accordion>
         <k-accordion-item title="Request E-Line Circuit">
           <k-input id="name-input" :value.sync="circuit_name"
                    title="Circuit Name:" tooltip="Circuit name"
                    placeholder="Circuit Name" icon="pencil"></k-input>

           <k-input-auto id="endpoint-a-input" :value.sync="endpoint_a"
                    title="Endpoint A:"
                    tooltip="Endpoint A (format: dpid:port_number)"
                    placeholder="First endpoint" icon="arrow-right"
                    :candidates="dpids" 
                    @focus="fetchDpids"
                    @blur="onblur_dpid"
					v-if="compexists"
                    ></k-input-auto>
            <k-input id="endpoint-a-input" :value.sync="endpoint_a"
                    title="Endpoint A:"
                    tooltip="Endpoint A (format: dpid:port_number)"
                    placeholder="First endpoint" icon="arrow-right"
					v-else
                    ></k-input> 
            <div class="k-input mef-field-label" :value.sync="endpoint_name_a"
                    >{{endpoint_name_a}}</div> 
            
           <k-input id="endpoint-a-tag-type" :value.sync="tag_type_a"
                    title="Tag Type A:"
                    tooltip="Enter with a Tag Type"
                    placeholder="tag type" icon="arrow-right"></k-input>

           <k-input id="endpoint-a-tag-value" :value.sync="tag_value_a"
                    title="Tag Value A:"
                    tooltip="Enter with a Tag value"
                    placeholder="tag value" icon="arrow-right"></k-input>

           <k-input-auto id="endpoint-z-input" :value.sync="endpoint_z"
                    title="Endpoint Z:"
                    tooltip="Endpoint Z (format: dpid:port_number)"
                    placeholder="Last endpoint" icon="arrow-left"
                    :candidates="dpids"
                    @focus="fetchDpids"
                    @blur="onblur_dpid"
					v-if="compexists"></k-input-auto>
            <div class="k-input mef-field-label" :value.sync="endpoint_name_z"
                    >{{endpoint_name_z}}</div> 
           <k-input id="endpoint-z-input" :value.sync="endpoint_z"
                    title="Endpoint Z:"
                    tooltip="Endpoint Z (format: dpid:port_number)"
                    placeholder="Last endpoint" icon="arrow-left"
                    v-else
                    ></k-input>

           <k-input id="endpoint-z-tag_type" :value.sync="tag_type_z"
                    title="Tag Type Z:"
                    tooltip="Enter with a Tag Type Z"
                    placeholder="tag type" icon="arrow-right"></k-input>

           <k-input id="endpoint-z-tag-value" :value.sync="tag_value_z"
                    title="Tag Value Z:"
                    tooltip="Enter with a Tag Value Z"
                    placeholder="tag value" icon="arrow-right"></k-input>

           <k-button tooltip="Request Circuit" title="Request Circuit"
                     icon="gear" :on_click="request_circuit">
                     </k-button>
         </k-accordion-item>

         <k-accordion-item title="List EVCs">
            <k-button tooltip="List installed EVC" title="List installed EVC"
                     icon="plug" :on_click="viewPanel">
                     </k-button>
         </k-accordion-item>
      </k-accordion>
    </k-toolbar-item>
</template>
<script>
module.exports = {
  data(){
    return {
        circuit_name: "",
        endpoint_a: "",
        endpoint_name_a: "Endpoint name:",
        tag_type_a: "",
        tag_value_a: "",
        endpoint_z: "",
        endpoint_name_z: "Endpoint name:",
        tag_type_z: "",
        tag_value_z: "",
        dpids: [""],
        hasAutoComplete:false
    }
  },
  methods: {
    viewPanel() {
        var _this = this;
        // Clear panel
        this.hideInfoPanel();
        // Wait 50ms to clear the panel.
        setTimeout(function(){
            _this.showInfoPanel();
        }, 50);
    },
    hideInfoPanel() {
        this.$kytos.$emit("hideInfoPanel");
    },
    showInfoPanel() {
        let listConnections = {
            component: 'kytos-mef_eline-k-info-panel-list_connections',
            content: {},
            icon: "desktop",
            title: "View Connections",
            subtitle: "by kytos/mef_eline"
        };
        this.$kytos.$emit("showInfoPanel", listConnections);
    },
    set_default_values() {
        this.circuit_name = "";
        this.endpoint_a = "";
        this.endpoint_name_a = "Endpoint name:";
        this.tag_type_a = "";
        this.tag_value_a = "";
        this.endpoint_z = "";
        this.endpoint_name_z = "Endpoint name:";
        this.tag_type_z = "";
        this.tag_value_z = "";
    },
    post_success(data) {
        let notification = {
            icon: 'gear',
            title: 'Circuit Created',
            description: 'Circuit with id ' + data.circuit_id + ' was created.'
        }
    
        this.$kytos.$emit("setNotification" , notification);
        // Clear fields if the POST is a success
        this.set_default_values();
    },
    post_error(data) {
        let notification = {
            icon: 'gear',
            title: 'Circuit Not Created (' + data.status + '):',
            description: data.responseJSON.description
        }
    
        this.$kytos.$emit("setNotification" , notification);
    },
    request_circuit () {
        var request = {
            "name" : this.circuit_name,
            "dynamic_backup_path": true,
            "enabled": true,
            "uni_a": {"interface_id": this.endpoint_a},
            "uni_z": {"interface_id": this.endpoint_z}
        }
        
        if (this.tag_type_a != "" && this.tag_value_a != "") {
            request.uni_a['tag'] = {tag_type: parseInt(this.tag_type_a),
                                    value: parseInt(this.tag_value_a)}
        }
        if (this.tag_type_z != "" && this.tag_value_z != "") {
            request.uni_z['tag'] = {tag_type: parseInt(this.tag_type_z),
                                    value: parseInt(this.tag_value_z)}
        }
        
        let circuit_request = $.ajax({
                                url: this.$kytos_server_api + "kytos/mef_eline/v2/evc/",
                                type:"POST",
                                data: JSON.stringify(request),
                                dataType: "json",
                                contentType: "application/json; charset=utf-8"
                            })
                    
        circuit_request.done(this.post_success)
        circuit_request.fail(this.post_error)
    },
    fetchDpids: function() {
        var self = this // create a closure to access component in the callback below
        dataUrl = "/api/kytos/topology/v3/interfaces"
        // Autocomplete usage example.
        fetch(dataUrl).then(response => response.json())
                    .then(data => {
                        dpids = []
                        for ( const [key,value] of Object.entries( data.interfaces ) ) {
                            let item = key;
                            if(value.name) {
                                item = value.name + " - " + item;
                            }
                            dpids.push(item);
                        }
                        self.dpids = dpids;
                    });
    },
    onblur_dpid: function() {
        /**
        * Update dpid values on event onblur triggered in dpids fields.
        * It split the value selected from autocomplete list.
        * It is expected the value as "NAME - DPID".
        **/
        let dpid_a = this.endpoint_a;
        if(dpid_a.lastIndexOf(' ') > 0) {
            let splitted_dpid = dpid_a.split(' ');
            this.endpoint_name_a = splitted_dpid[0];
            this.endpoint_a = splitted_dpid[2];
        }
        
        let dpid_z = this.endpoint_z;
        if(dpid_z.lastIndexOf(' ') > 0) {
            let splitted_dpid = dpid_z.split(' ');
            this.endpoint_name_z = splitted_dpid[0];
            this.endpoint_z = splitted_dpid[2];
        }
    },
  },
  mounted() { // when the Vue app is booted up, this is run automatically.
    this.fetchDpids();
    compexists = this.$root.$options.components['k-input-auto'] != null;
  },
  created() {
    compexists = this.$root.$options.components['k-input-auto'] != null;
  }
}
</script>
<style>
  .mef-field-label {
    padding-left: 2.3em;
    color: #737373;
    height: 1.1em;
    padding-top: 0.4em;
  }
  #endpoint-a-input .autocomplete-result-list,
  #endpoint-z-input .autocomplete-result-list {
    width: 100% !important;
    outline: 0;
    border: 1px #515151 solid;
    border-radius: 3px;
  }
  .autocomplete-result-list li {
    white-space: nowrap;
  }
</style>